import React from 'react';
import { shallow } from 'enzyme';
import sinon from 'sinon';
import Pen from 'components/Pen.js';

describe('<Pen />', function () {

  let component;
  let testColor;
  let testCurrentColor;
  let testOnChangeColor;
  beforeEach(function () {
    testColor = '#010101';
    testCurrentColor = '#404040';
    testOnChangeColor = () => {};
    component = shallow(
      <Pen
        color={testColor}
        currentColor={testCurrentColor}
        onChangeColor={testOnChangeColor} />
    );
  });

  describe('when rendering the component', function () {
    it('should set backgroundColor', function () {
      expect(component.prop('style')).to.have.property('backgroundColor', testColor);
    });
    it('should set pen-active when active', function () {
      const currentColor = testColor;
      expect(component.prop('className')).to.not.contain('pen-active');
      component.setProps({ currentColor });
      expect(component.prop('className')).to.contain('pen-active');
    });
  });

  describe('mousedown', function () {
    it('should call callback', function () {
      const onChangeColor = sinon.spy();
      component.setProps({ onChangeColor });
      component.simulate('mousedown');
      expect(onChangeColor.withArgs(testColor).calledOnce).to.equal(true);
    });
  });
});
